---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Implementation plan

## Phase 1: Environment Setup

1. **Prevalidation:** In the project root (`./`), run `git status` and `python --version` to confirm it’s a git repo and Python 3.11.4 is installed (**Project Summary**).
2. **Initialize Git:** If not a repo, run `git init` in `./` (**Tech Stack: Git**).
3. **Create Virtual Environment:** Run `python -m venv venv` to create a Python 3.11.4 venv at `/venv` (**Tech Stack: Core Tools**).
4. **Activate Virtual Environment:** macOS/Linux: `source venv/bin/activate`; Windows: `venv\Scripts\activate` (**Tech Stack: Core Tools**).
5. **Create requirements.txt:** In `./requirements.txt`, list:
   ```
   pandas
   openpyxl
   streamlit
   ```
   (**Tech Stack: Python Libraries**).
6. **Install Dependencies:** Run `pip install -r requirements.txt` in the activated venv (**Tech Stack: Python Libraries**).
7. **Create Directory Structure:** In `./`, create:
   - `/src/data_processing`
   - `/src/ui`
   - `/tests`
   (**Implementation Plan**).
8. **Cursor Metrics File:** Create `./cursor_metrics.md` and add a reference comment to `cursor_project_rules.mdc` for Cursor guidelines (**Tech Stack: Cursor**).

## Phase 2: Core Data Processing Modules

9. **GL Aggregation Module:** Create `/src/data_processing/aggregation.py` and implement:
   - Load `GL Inquiry.xlsx` via pandas
   - Filter `Account` for substrings '5040','5030','4020'
   - Compute `Amount = Debit + Credit`
   - Group by trimmed `Job Number` and `Account Type`, sum `Amount`
   (**Project Summary: GL Data Aggregation**).
10. **Test GL Aggregation:** Create `/tests/test_aggregation.py` with pytest cases for sample GL data, assert sums match manual calculation (**Project Summary: Validation Requirements**).
11. **Merge WIP Worksheet Module:** Create `/src/data_processing/merge_data.py` to:
    - Load `WIP Worksheet.xlsx`
    - Trim whitespace on `Job Number`
    - Left-join with aggregated GL data
    - Exclude `Status='Closed'` by default, fill missing with 0
    (**Project Summary: Data Matching**).
12. **Test Merge Logic:** Create `/tests/test_merge_data.py` to verify join behavior and closed‐job exclusion, test fill‐0 behavior (**Project Summary: Data Matching**).
13. **Column Mapping Utility:** Create `/src/data_processing/column_mapping.py` defining `COLUMN_MAPPINGS` dict and a function to match header variations (e.g., 'Job No', 'Job Number') (**Project Summary: Column Mapping**).
14. **Test Column Mapping:** Create `/tests/test_column_mapping.py` to assert correct resolution of varied header names (**Project Summary: Column Mapping**).

## Phase 3: Excel Integration (Read/Write)

15. **Excel Integration Module:** Create `/src/data_processing/excel_integration.py` (**Project Summary: WIP Report Update Process**).
16. **Load Workbook with VBA:** In `excel_integration.py`, implement `load_wip_workbook(path)` using `openpyxl.load_workbook(path, keep_vba=True)` (**Project Summary: Input Files**).
17. **Find Section Markers:** Implement `find_section(ws, marker)` to locate start row for '5040' and '5030' sections in the active sheet (**Project Summary: Input Files**).
18. **Test Section Finder:** Add `/tests/test_excel_sections.py` to verify `find_section` locates correct rows on a sample workbook (**Project Summary: Input Files**).
19. **Clear Data Preserve Formulas:** Implement `clear_data(ws, start_row, cols)` to clear only value cells in given columns until an empty row, skip formula cells (`cell.data_type=='f'`) (**Project Summary: Critical Constraints**).
20. **Test Clear Function:** Create `/tests/test_clear_data.py` to ensure formulas remain and values are cleared correctly (**Project Summary: Critical Constraints**).
21. **Update Data Values:** Implement `write_values(ws, data_df, start_row, mapping)` to write merged data into value‐only columns, leave formulas intact, preserve formatting (**Project Summary: Critical Constraints**).
22. **Test Write Values:** Add `/tests/test_write_values.py` validating written values and untouched formula cells (**Project Summary: Critical Constraints**).
23. **Backup Before Update:** In `excel_integration.py`, before write, copy original WIP report to `./WIP_Backups/WIP_Report_BACKUP_YYYYMMDD_HHMMSS.xlsx` using `os` & `shutil` (**Project Summary: Backup Strategy**).
24. **Test Backup Creation:** Add `/tests/test_backup.py` to assert backup file exists with correct timestamp format after running backup function (**Project Summary: Backup Strategy**).

## Phase 4: Validation & Reporting

25. **Validation Module:** Create `/src/data_processing/validation.py` to:
    - Compute variances = `Actual − Budget` for Material & Labor
    - Flag jobs where variance > $1,000
    - Export a pandas DataFrame of flags
    (**Project Summary: Validation Requirements**).
26. **Test Validation:** Add `/tests/test_validation.py` to assert correct flagging on example data (**Project Summary: Validation Requirements**).
27. **Validation Report Saver:** In `validation.py`, implement `save_validation_report(df, path)` to write flagged jobs to Excel (`.xlsx`) preserving US formatting (**Project Summary: Validation Requirements**).

## Phase 5: Streamlit Interface

28. **Create Streamlit App:** Create `/src/ui/app.py` and import processing functions (**Project Summary: User Interface Requirements**).
29. **File Uploaders:** Add three `st.file_uploader` widgets for `WIP Report.xlsx`, `WIP Worksheet.xlsx`, `GL Inquiry.xlsx` (**Project Summary: Input Method**).
30. **Month/Year Selector:** Use `st.date_input` limiting to month/year, defaulting to today (**Project Summary: Input Method**).
31. **Include Closed Checkbox:** Add `st.checkbox('Include Closed Jobs', value=False)` for quarterly true‐ups (**Project Summary: Closed Jobs**).
32. **Process Button & Progress:** Add `st.button('Process')` and `st.progress` to show step‐by‐step status (**Project Summary: User Interface Requirements**).
33. **Run Pipeline on Click:** On button press, call aggregation → merge → excel integration → validation; catch exceptions and display `st.error` (**Project Summary: Error Handling**).
34. **Preview Before Update:** Add `st.checkbox('Preview only, do not update WIP Report')` to skip write operations if checked (**Project Summary: User Interface Requirements**).
35. **Display Data Table:** Use `st.dataframe` to show merged data before update (**Project Summary: User Interface Requirements**).
36. **Download Buttons:** Use `st.download_button` for:
    - Updated WIP Report (`.xlsm`)
    - Validation Report (`.xlsx`)
   (**Project Summary: Output Options**).
37. **Summary Statistics:** Display `jobs_processed`, `variances_flagged` via `st.metric` cards (**Project Summary: Output Options**).
38. **Test UI Manually:** Run `streamlit run src/ui/app.py` and verify all controls appear and pipeline completes under 30 s with sample files (**Project Summary: Performance Considerations**).

## Phase 6: Logging & Error Handling

39. **Configure Logging:** Create `/src/logger_config.py` setting up Python `logging` to write transformation logs to `./logs/` with timestamped CSV files (**Project Summary: Error Handling**).
40. **Test Logging:** Run a sample pipeline and assert a log file is created in `./logs/` (**Project Summary: Error Handling**).
41. **Missing Column Errors:** In each module, check for required headers; if missing, raise a custom `ValueError` with message specifying missing column name (**Project Summary: Error Handling**).
42. **Test Error Handling:** Add `/tests/test_error_handling.py` to provoke missing‐column errors and assert clear messages (**Project Summary: Error Handling**).

## Phase 7: Deployment & Documentation

43. **README.md:** In project root, create `README.md` with:
    - Setup instructions (Phases 1–3)
    - Run command: `streamlit run src/ui/app.py`
    - Configuration notes
   (**Implementation Plan**).
44. **Local Deployment Section:** Document in `README.md` how to:
    - Activate venv
    - Install requirements
    - Run Streamlit
   (**Implementation Plan**).
45. **Intranet Hosting Guide:** In `README.md`, add instructions for IT:
    - Install Python 3.11.4
    - Expose port 8501 on company network
    - Set file‐share permissions for backups/logs
   (**Implementation Plan**).
46. **CI/CD Stub:** Add `.github/workflows/ci.yml` that:
    - Installs dependencies
    - Runs `pytest`
   (**Implementation Plan**).
47. **Backup Retention Note:** In `README.md`, note that backups older than 12 months must be purged manually per audit requirements (**Project Summary: Backup Strategy**).
48. **User Guide:** In `docs/user_guide.md`, detail UI steps, file naming conventions, error message explanations (**Project Summary: User Interface Requirements**).
49. **Developer Guide:** In `docs/dev_guide.md`, explain module structure, how to add tests, coding standards (**Implementation Plan**).
50. **Final Validation:** Perform an end‐to‐end run with real client files, confirm:
    - All formulas in WIP Report preserved
    - Backup created
    - Validation report correct
    - UI downloadable reports function
    - Logs generated
   Document results in `docs/test_report.md` (**Project Summary: Performance Considerations**).

---
*All steps include validation tests or manual checks to ensure correctness and full auditability.*